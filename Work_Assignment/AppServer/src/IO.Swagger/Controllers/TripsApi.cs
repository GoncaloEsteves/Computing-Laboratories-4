/*
 * PlugGoBeyond
 *
 * Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Informática
 *
 * OpenAPI spec version: 1.0.0
 * Contact: a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.DataAcess;
using IO.Swagger.Security;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TripsApiController : ControllerBase
    { 
        /// <summary>
        /// Add a trip into the system.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid parameter.</response>
        [HttpPost]
        [Route("/trips")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddTrip")]
        public virtual IActionResult AddTrip([FromBody]TripInfo body)
        {
            try
            {
                TripDAO newTripDao = new TripDAO(DAOController.MyConnection);
                UserDAO uD = new UserDAO(DAOController.MyConnection);
                User u = uD.Get(body.Username);

                if (u != null) //não deixa inserir uma trip se o utilizador não existir previamente
                {
                    newTripDao.Put(body.Username, body.Trip);
                }
                else return StatusCode(400);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Removes a trip.
        /// </summary>
        /// <param name="username">Username of the user that want to delete the trip.</param>
        /// <param name="tripId">Trip id that needs to be removed from the system.</param>
        /// <response code="400">Invalid id.</response>
        /// <response code="404">Trip not found.</response>
        [HttpDelete]
        [Route("/trips/{tripId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteTrip")]
        public virtual IActionResult DeleteTrip([FromQuery][Required()]string username, [FromRoute][Required]int? tripId)
        {
            try
            {
                TripDAO newTripDao = new TripDAO(DAOController.MyConnection);
                Trip trip = newTripDao.Get(tripId.Value);

                if (trip == null)
                {
                    return StatusCode(404);
                }
                newTripDao.Delete(tripId.Value);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// List all trips.
        /// </summary>
        /// <response code="200">Success.</response>
        /// <response code="400">Error during the operation.</response>
        [HttpGet]
        [Route("/trips")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("FindTrips")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Trip>), description: "Success.")]
        public virtual IActionResult FindTrips()
        {
            TripDAO newTripDao = new TripDAO(DAOController.MyConnection);

            try
            {
                ICollection<Trip> allTrips = newTripDao.GetAll();
                return new ObjectResult(allTrips);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find all trips by the ids given.
        /// </summary>
        /// <remarks>Multiple trips can be requested to be given. It&#x27;s only required that they have a comma token to separate them.</remarks>
        /// <param name="ids">Ids of the trips.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid ids.</response>
        [HttpGet]
        [Route("/trips/filterByIds")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("FindTripsByIds")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Trip>), description: "Success.")]
        public virtual IActionResult FindTripsByIds([FromQuery][Required()]List<int?> ids)
        {
            TripDAO newTripDao = new TripDAO(DAOController.MyConnection);

            try
            {
                List<int> newIds = new List<int>(ids.Count);
                foreach (int i in ids)
                {
                    newIds.Add(i);
                }

                ICollection<Trip> idsTrips = newTripDao.GetTripList(newIds);

                return new ObjectResult(idsTrips);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find a trip by a given ID.
        /// </summary>
        /// <remarks>Returns a trip.</remarks>
        /// <param name="tripId"></param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid id.</response>
        /// <response code="404">Trip not found.</response>
        [HttpGet]
        [Route("/trips/{tripId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTripById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Trip), description: "Success.")]
        public virtual IActionResult GetTripById([FromRoute][Required]int? tripId)
        {
            try
            {
                TripDAO newTripDao = new TripDAO(DAOController.MyConnection);
                Trip trip = newTripDao.Get(tripId.Value);

                if (trip == null)
                {
                    return StatusCode(404);
                }
                return new ObjectResult(trip);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Update a trip.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="tripId">Trip id that needs to be updated.</param>
        /// <response code="400">Invalid id.</response>
        /// <response code="404">Trip not found.</response>
        [HttpPut]
        [Route("/trips/{tripId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateTrip")]
        public virtual IActionResult UpdateTrip([FromBody]Trip body, [FromRoute][Required]int? tripId)
        {
            try
            {
                TripDAO newTripDao = new TripDAO(DAOController.MyConnection);
                Trip trip = newTripDao.Get((int)tripId);

                if (trip == null || trip.TripId != tripId)
                {
                    return StatusCode(404);
                }

                newTripDao.Update(body);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
            return StatusCode(200);
        }
    }
}

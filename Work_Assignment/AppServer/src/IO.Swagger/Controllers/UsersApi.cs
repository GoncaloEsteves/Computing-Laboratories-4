/*
 * PlugGoBeyond
 *
 * Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Informática
 *
 * OpenAPI spec version: 1.0.0
 * Contact: a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.DataAcess;
using static IO.Swagger.Security.TokenDetails;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new credit card to a user.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="username">Username id that wants to add a credit card.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid parameter.</response>
        [HttpPost]
        [Route("/users/{username}/manage/creditCards")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddCreditCard")]
        public virtual IActionResult AddCreditCard([FromBody]CreditCard body, [FromRoute][Required]string username)
        {
            try
            {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                newUserDao.AddCreditCard(body, username);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Add a new favorite charging station to the user.
        /// </summary>
        /// <param name="body">The id of the charging station to be added to the favorites of the user.</param>
        /// <param name="username">Username id that wants to add a new charging station.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid parameter.</response>
        [HttpPost]
        [Route("/users/{username}/manage/favorites")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddFavChargingStation")]
        public virtual IActionResult AddFavChargingStation([FromBody]FavoriteStations body, [FromRoute][Required]string username)
        {
            try
            {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                newUserDao.AddFavChargingStation(body.ChargingStationId, username);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Add a new user to the system.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid parameter.</response>
        [HttpPost]
        [Route("/users")]
        [ValidateModelState]
        [SwaggerOperation("AddUser")]
        public virtual IActionResult AddUser([FromBody]User body)
        {
            try
            {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                User verifyUser = newUserDao.Get(body.Username);
                if (verifyUser == null) //para não adicionar users com usernames repetidos
                {
                    newUserDao.Put(body);
                }
                else return StatusCode(400);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Removes a given credit card from a user.
        /// </summary>
        /// <param name="username">Username of the user that want to delete the credit card.</param>
        /// <param name="creditCardNr">Credit card number needs to be removed from the user.</param>
        /// <response code="400">Invalid id.</response>
        /// <response code="404">User not found.</response>
        [HttpDelete]
        [Route("/users/{username}/manage/creditCards/{creditCardNr}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteCreditCard")]
        public virtual IActionResult DeleteCreditCard([FromRoute][Required]string username, [FromRoute][Required]string creditCardNr)
        {
            try
            {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                CreditCard cc = newUserDao.GetCreditCard(username, creditCardNr);

                if (cc == null)
                {
                    return StatusCode(404);
                }
                newUserDao.DeleteCreditCard(username, creditCardNr);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Delete a favorite charging station of the user.
        /// </summary>
        /// <param name="username">Username id that one of his favorite stations will be deleted.</param>
        /// <param name="chargingStationId">The id of the charging station to be deleted of the favorites of the user.</param>
        /// <response code="204">No Content.</response>
        [HttpDelete]
        [Route("/users/{username}/manage/favorites/{chargingStationId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteFavoriteStation")]
        public virtual IActionResult DeleteFavoriteStation([FromRoute][Required]string username, [FromRoute][Required]string chargingStationId)
        {
            try
            {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                string st = newUserDao.GetFavChargingStation(username, chargingStationId);

                if (st == null)
                {
                    return StatusCode(404);
                }
                newUserDao.DeleteFavoriteStation(username, chargingStationId);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Removes a user.
        /// </summary>
        /// <param name="username">Username of the user to be removed from the system.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid username.</response>
        /// <response code="404">User not found.</response>
        [HttpDelete]
        [Route("/users/{username}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Success.")]
        public virtual IActionResult DeleteUser([FromRoute][Required]string username)
        {
            try
            {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                User user = newUserDao.Get(username);

                if (user == null)
                {
                    return StatusCode(404);
                }
                ICollection<Vehicle> vehicles = newUserDao.GetVehicles(username);
                VehicleDAO vehicleDAO = new VehicleDAO(DAOController.MyConnection);
                foreach (Vehicle v in vehicles)
                {
                    vehicleDAO.Delete(username, v.RegistrationNumber);

                }

                ICollection<CreditCard> cards = newUserDao.GetCreditCards(username);
                foreach (CreditCard c in cards)
                {
                    newUserDao.DeleteCreditCard(username, c.CardNumber); 

                }

                ICollection<string> favs = newUserDao.GetFavChargingStations(username);
                foreach (string s in favs)
                {
                    newUserDao.DeleteFavoriteStation(username, s);

                }
                ICollection<int> trips = newUserDao.GetTrips(username);
                TripDAO tripDAO = new TripDAO(DAOController.MyConnection);
                foreach (int id in trips)
                {
                    tripDAO.Delete(id);

                }
                newUserDao.Delete(username);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// List all registered users.
        /// </summary>
        /// <response code="200">Success.</response>
        /// <response code="400">Error in the operation.</response>
        [HttpGet]
        [Route("/users")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("FindUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "Success.")]
        public virtual IActionResult FindUsers()
        {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);

            try
            {
                ICollection<User> allUsers = newUserDao.GetAll();
                return new ObjectResult(allUsers);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Get all credit cards from a user.
        /// </summary>
        /// <param name="username">Username id to get all credit cards.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Error in the operation.</response>
        [HttpGet]
        [Route("/users/{username}/manage/creditCards")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetCreditCard")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CreditCard>), description: "Success.")]
        public virtual IActionResult GetCreditCard([FromRoute][Required]string username)
        {
            UserDAO newUserDao = new UserDAO(DAOController.MyConnection);

            try
            {
                ICollection<CreditCard> allCCs = newUserDao.GetCreditCards(username);
                return new ObjectResult(allCCs);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Get a credit cards from a user.
        /// </summary>
        /// <param name="username">Username id to get one credit card.</param>
        /// <param name="creditCardNr">Credit card number needs to be found.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Error in the operation.</response>
        /// <response code="404">Card not found.</response>
        [HttpGet]
        [Route("/users/{username}/manage/creditCards/{creditCardNr}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetOneCreditCard")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreditCard), description: "Success.")]
        public virtual IActionResult GetOneCreditCard([FromRoute][Required]string username, [FromRoute][Required]string creditCardNr)
        { 
            UserDAO newUserDao = new UserDAO(DAOController.MyConnection);

            try
            {
                CreditCard oneCCs = newUserDao.GetCreditCard(username,creditCardNr);
                return new ObjectResult(oneCCs);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find user by a given username.
        /// </summary>
        /// <remarks>Returns only the user with that username.</remarks>
        /// <param name="username">Username of the user.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid username.</response>
        /// <response code="404">User not found.</response>
        [HttpGet]
        [Route("/users/{username}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetUserByUsername")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Success.")]
        public virtual IActionResult GetUserByUsername([FromRoute][Required]string username)
        {
            UserDAO newUserDao = new UserDAO(DAOController.MyConnection);

            try
            {
                User user = newUserDao.Get(username);
                return new ObjectResult(user);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// List all favorites charging stations of a user.
        /// </summary>
        /// <remarks>Returns the favorites charging stations of a given user.</remarks>
        /// <param name="username">Username of the user.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid username.</response>
        /// <response code="404">User not found.</response>
        [HttpGet]
        [Route("/users/{username}/manage/favorites")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetUserFavChargingStations")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Success.")]
        public virtual IActionResult GetUserFavChargingStations([FromRoute][Required]string username)
        {
            UserDAO newUserDao = new UserDAO(DAOController.MyConnection);

            try
            {
                ICollection<string> allFSs = newUserDao.GetFavChargingStations(username);
                return new ObjectResult(allFSs);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Get all the trips made by a user.
        /// </summary>
        /// <param name="username">Username id that wants to get the trips.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Error during the operation.</response>
        [HttpGet]
        [Route("/users/{username}/manage/trips")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetUserTrips")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Trip>), description: "Success.")]
        public virtual IActionResult GetUserTrips([FromRoute][Required]string username)
        {
            UserDAO newUserDao = new UserDAO(DAOController.MyConnection);

            try
            {
                ICollection<int> allTrips = newUserDao.GetTrips(username);
                TripDAO newTripDao = new TripDAO(DAOController.MyConnection);
                ICollection<Trip> trips = newTripDao.GetTripList((List<int>)allTrips);
                return new ObjectResult(trips);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Get all vehicles of a given user.
        /// </summary>
        /// <param name="username">Username id that wants to get the vehicles.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Error during the operation.</response>
        [HttpGet]
        [Route("/users/{username}/manage/vehicles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetUserVehicles")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Vehicle>), description: "Success.")]
        public virtual IActionResult GetUserVehicles([FromRoute][Required]string username)
        {
            UserDAO newUserDao = new UserDAO(DAOController.MyConnection);

            try
            {
                ICollection<Vehicle> allVehicles = newUserDao.GetVehicles(username);
                return new ObjectResult(allVehicles);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Login a user into the system.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid username or password.</response>
        [HttpPost]
        [Route("/users/login")]
        [ValidateModelState]
        [SwaggerOperation("LoginUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success.")]
        public virtual IActionResult LoginUser([FromBody]LoginInfo body)
        {
            try
            {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                User u = newUserDao.Get(body.Username);
                
                if (u != null && u.Password.Equals(body.Password))
                {
                    var now = DateTime.UtcNow;
                    string token = TokensManager.generateToken(u.Username, u.Password, now);
                    return StatusCode(200, token);
                } else
                {
                    return StatusCode(400);
                }
            } 
            
            catch (Exception)
            {
                return StatusCode(400);
            }

            return new ObjectResult(400);
        }

        /// <summary>
        /// Quit session of the user.
        /// </summary>
        /// <response code="0">Success.</response>
        [HttpDelete]
        [Route("/users/logout")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("LogoutUser")]
        public virtual IActionResult LogoutUser()
        {
            return StatusCode(200, "");
        }

        /// <summary>
        /// Update user password.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="username">Username id that wants to update password.</param>
        /// <response code="400">Invalid username.</response>
        /// <response code="404">User not found.</response>
        [HttpPut]
        [Route("/users/{username}/manage/password")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdatePassword")]
        public virtual IActionResult UpdatePassword([FromBody]ChangePassword body, [FromRoute][Required]string username)
        {
            try
            {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                User user = newUserDao.Get(username);

                if (user == null)
                {
                    return StatusCode(404);
                }

                if (!user.Password.Equals(body.CurrentPassword))
                {
                    return StatusCode(400);
                }
                newUserDao.UpdatePassword(body.NewPassword, username);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Update a user.
        /// </summary>
        /// <param name="body">Updates the user.</param>
        /// <param name="username">Username id that needs to be updated.</param>
        /// <response code="400">Invalid username.</response>
        /// <response code="404">User not found.</response>
        [HttpPut]
        [Route("/users/{username}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateUser")]
        public virtual IActionResult UpdateUser([FromBody]User body, [FromRoute][Required]string username)
        {
            try
            {
                UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                User user = newUserDao.Get(username);

                if (user == null)
                {
                    return StatusCode(404);
                }
                body.Username = username;
                newUserDao.Update(body);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }
    }
}

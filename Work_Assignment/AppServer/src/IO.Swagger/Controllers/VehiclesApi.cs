/*
 * PlugGoBeyond
 *
 * Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Informática
 *
 * OpenAPI spec version: 1.0.0
 * Contact: a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.DataAcess;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VehiclesApiController : ControllerBase
    { 
        /// <summary>
        /// Add a vehicle into the system.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid Parameter.</response>
        [HttpPost]
        [Route("/vehicles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddVehicle")]
        public virtual IActionResult AddVehicle([FromBody]VehicleInfo body)
        {
            try
            {
                VehicleDAO newVehicleDao = new VehicleDAO(DAOController.MyConnection);
                Vehicle verifyvehicle = newVehicleDao.Get(body._VehicleInfo.RegistrationNumber);
                Console.WriteLine(verifyvehicle.RegistrationNumber == null);
                if (verifyvehicle.RegistrationNumber == null) //para não adicionar users com usernames repetidos
                {
                    newVehicleDao.Put(body.Username, body._VehicleInfo);
                }
                else return StatusCode(400);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Removes a vehicle.
        /// </summary>
        /// <param name="username">Username of the user that want to delete the vehicle.</param>
        /// <param name="registrationNr">Registration number of the vehicle that needs to be removed.</param>
        /// <response code="400">Invalid registration number.</response>
        /// <response code="404">Vehicle not found.</response>
        [HttpDelete]
        [Route("/vehicles/{registrationNr}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteVehicle")]
        public virtual IActionResult DeleteVehicle([FromQuery][Required()]string username, [FromRoute][Required]string registrationNr)
        {
            try
            {
                VehicleDAO newVehicleDao = new VehicleDAO(DAOController.MyConnection);
                newVehicleDao.Delete(username, registrationNr);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// List all vehicles.
        /// </summary>
        /// <response code="200">Success.</response>
        /// <response code="400">Operation error.</response>
        [HttpGet]
        [Route("/vehicles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("FindVehicles")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Vehicle>), description: "Success.")]
        public virtual IActionResult FindVehicles()
        {
            VehicleDAO newVehicleDAO = new VehicleDAO(DAOController.MyConnection);

            try
            {
                ICollection<Vehicle> allVehicles = newVehicleDAO.GetAll();
                return new ObjectResult(allVehicles);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find all trips by the ids given.
        /// </summary>
        /// <remarks>Multiple vehicles can be requested to be given. It&#x27;s only required that they have a comma token to separate them.</remarks>
        /// <param name="ids">Ids of the vehicles.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid ids.</response>
        [HttpGet]
        [Route("/vehicles/filterByIds")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("FindVehiclesByIds")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Vehicle>), description: "Success.")]
        public virtual IActionResult FindVehiclesByIds([FromQuery][Required()]List<string> ids)
        {

            VehicleDAO newVehicleDAO = new VehicleDAO(DAOController.MyConnection);

            try
            {
                ICollection<Vehicle> vehicles = new List<Vehicle>();

                vehicles = newVehicleDAO.GetByList(ids);

                return new ObjectResult(vehicles);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find a vehicle by it&#x27;s registration number.
        /// </summary>
        /// <remarks>Returns the vehicle</remarks>
        /// <param name="registrationNr"></param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid registration number.</response>
        /// <response code="404">Vehicle not found.</response>
        [HttpGet]
        [Route("/vehicles/{registrationNr}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetVehicleByRegsNr")]
        [SwaggerResponse(statusCode: 200, type: typeof(Vehicle), description: "Success.")]
        public virtual IActionResult GetVehicleByRegsNr([FromRoute][Required]string registrationNr)
        {
            VehicleDAO newVehicleDAO = new VehicleDAO(DAOController.MyConnection);

            try
            {
                Vehicle vehicle = newVehicleDAO.Get(registrationNr);
                return new ObjectResult(vehicle);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find a vehicle&#x27;s type code by it&#x27;s registration number.
        /// </summary>
        /// <remarks>Returns the vehicle&#x27;s type code.</remarks>
        /// <param name="registrationNr">Registration number of the vehicle that we want to extract type code.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid registration number.</response>
        /// <response code="404">Vehicle not found.</response>
        [HttpGet]
        [Route("/vehicles/{registrationNr}/getTypeCode")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetVehicleTypeCode")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success.")]
        public virtual IActionResult GetVehicleTypeCode([FromRoute][Required]string registrationNr)
        {
            VehicleDAO newVehicleDAO = new VehicleDAO(DAOController.MyConnection);
            string typeCode;
            try
            {
                Vehicle vehicle = newVehicleDAO.Get(registrationNr);

                if (vehicle == null || vehicle.RegistrationNumber != registrationNr)
                {
                    return StatusCode(404);
                }

                typeCode = vehicle.TypeCode;
                return new ObjectResult(typeCode);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Updates the last consumption of a vehicle.
        /// </summary>
        /// <remarks>Returns success if the operation is completed.</remarks>
        /// <param name="body"></param>
        /// <param name="registrationNr">Registration number of the vehicle that needs to be updated.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid registration number.</response>
        /// <response code="404">Vehicle not found.</response>
        [HttpPut]
        [Route("/vehicles/{registrationNr}/putConsumption")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateLastConsumption")]
        public virtual IActionResult UpdateLastConsumption([FromBody]UpdateConsumption body, [FromRoute][Required]string registrationNr)
        { 
            try
            {
                VehicleDAO newVehicleDao = new VehicleDAO(DAOController.MyConnection);
                Vehicle vehicle = newVehicleDao.Get(registrationNr);


                if (vehicle == null || vehicle.RegistrationNumber != registrationNr)
                {
                    return StatusCode(404);
                }

                newVehicleDao.UpdateConsumption(body.Consumption, registrationNr);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
            return StatusCode(200);
        }

        /// <summary>
        /// Updates a vehicle.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="registrationNr">Registration number of the vehicle that needs to be updated.</param>
        /// <response code="400">Invalid registration number.</response>
        /// <response code="404">Vehicle not found.</response>
        [HttpPut]
        [Route("/vehicles/{registrationNr}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateVehicle")]
        public virtual IActionResult UpdateVehicle([FromBody]Vehicle body, [FromRoute][Required]string registrationNr)
        {
            try
            {
                VehicleDAO newVehicleDao = new VehicleDAO(DAOController.MyConnection);
                Vehicle vehicle = newVehicleDao.Get(registrationNr);


                if (vehicle == null || vehicle.RegistrationNumber != registrationNr)
                {
                    return StatusCode(404);
                }

                newVehicleDao.Update(body);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
            return StatusCode(200);
        }
    }
}

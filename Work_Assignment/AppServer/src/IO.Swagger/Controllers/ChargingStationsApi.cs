/*
 * PlugGoBeyond
 *
 * Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Inform√°tica
 *
 * OpenAPI spec version: 1.0.0
 * Contact: a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.DataAcess;
using IO.Swagger.Security;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ChargingStationsApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new charging station into the system.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid parameter.</response>
        [HttpPost]
        [Route("/chargingStations")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddChargingStation")]
        public virtual IActionResult AddChargingStation([FromBody]ChargingStation body)
        {
            try
            {
                ChargingStationDAO stationDao = new ChargingStationDAO(DAOController.MyConnection);


                stationDao.Put(body);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Removes a charging station.
        /// </summary>
        /// <param name="chargingStationId">Charging station id that needs to be removed.</param>
        /// <response code="400">Invalid id</response>
        /// <response code="404">Charging station not found.</response>
        [HttpDelete]
        [Route("/chargingStations/{chargingStationId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteChargingStation")]
        public virtual IActionResult DeleteChargingStation([FromRoute][Required]string chargingStationId)
        {
            try
            {
                ChargingStationDAO stationDao = new ChargingStationDAO(DAOController.MyConnection);
                ChargingStation chargingSt = stationDao.Get(chargingStationId);

                if (chargingSt == null)
                {
                    return StatusCode(404);
                }
                stationDao.Delete(chargingStationId);

            }
            catch (Exception)
            {
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// List all charging stations.
        /// </summary>
        /// <response code="200">Success.</response>
        /// <response code="400">Error during operation.</response>
        [HttpGet]
        [Route("/chargingStations")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("FindChargingStation")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ChargingStation>), description: "Success.")]
        public virtual IActionResult FindChargingStation()
        {
            ChargingStationDAO stationDao = new ChargingStationDAO(DAOController.MyConnection);

            try
            {
                ICollection<ChargingStation> allStations = stationDao.GetAll();
                return new ObjectResult(allStations);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find all charging stations by a given status.
        /// </summary>
        /// <remarks>Multiple status can be requested to be filted. It&#x27;s only required that they have a comma token to separate them.</remarks>
        /// <param name="status">Status to filter the charging stations.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid status.</response>
        [HttpGet]
        [Route("/chargingStations/findByStatus")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("FindChargingStationByStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ChargingStation>), description: "Success.")]
        public virtual IActionResult FindChargingStationByStatus([FromQuery][Required()]List<string> status)
        {
            try
            {
                ChargingStationDAO stationDao = new ChargingStationDAO(DAOController.MyConnection);
                ICollection<ChargingStation> listStation = stationDao.GetByStatus(status);

                return new ObjectResult(listStation);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find all charging stations by the ids given.
        /// </summary>
        /// <remarks>Multiple charging stations can be requested to be given. It&#x27;s only required that they have a comma token to separate them.</remarks>
        /// <param name="ids">Ids of the charging stations.</param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid ids.</response>
        [HttpGet]
        [Route("/chargingStations/filterByIds")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("FindChargingStationsByIds")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ChargingStation>), description: "Success.")]
        public virtual IActionResult FindChargingStationsByIds([FromQuery][Required()]List<string> ids)
        {
            try
            {
                ChargingStationDAO stationDao = new ChargingStationDAO(DAOController.MyConnection);
                ICollection<ChargingStation> listStation = new List<ChargingStation>();


                foreach (String str in ids)
                {
                    ChargingStation station = stationDao.Get(str);

                    listStation.Add(station);

                }

                return new ObjectResult(listStation);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find all charging stations with a fast connector.
        /// </summary>
        /// <response code="200">Success.</response>
        /// <response code="400">Error during operation</response>
        [HttpGet]
        [Route("/chargingStations/findByFastConnector")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("FindFastChargingStations")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ChargingStation>), description: "Success.")]
        public virtual IActionResult FindFastChargingStations()
        {
            ChargingStationDAO stationDAO = new ChargingStationDAO(DAOController.MyConnection);

            try
            {
                ICollection<ChargingStation> allFastStations = stationDAO.GetFast();
                return new ObjectResult(allFastStations);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Find a charging station by a given id.
        /// </summary>
        /// <remarks>Returns the charging station that matches the id.</remarks>
        /// <param name="chargingStationId"></param>
        /// <response code="200">Success.</response>
        /// <response code="400">Invalid id.</response>
        /// <response code="404">Charging station not found.</response>
        [HttpGet]
        [Route("/chargingStations/{chargingStationId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetStationById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ChargingStation), description: "Success.")]
        public virtual IActionResult GetStationById([FromRoute][Required]string chargingStationId)
        {
            try
            {
                ChargingStationDAO stationDao = new ChargingStationDAO(DAOController.MyConnection);
                ChargingStation chargingSt = stationDao.Get(chargingStationId);

                if (chargingSt == null)
                {
                    return StatusCode(404);
                }
                return new ObjectResult(chargingSt);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Updates a charging station.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="chargingStationId">Charging station id that needs to be updated.</param>
        /// <response code="400">Invalid id.</response>
        /// <response code="404">Charging station not found.</response>
        [HttpPut]
        [Route("/chargingStations/{chargingStationId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateStation")]
        public virtual IActionResult UpdateStation([FromBody]ChargingStation body, [FromRoute][Required]string chargingStationId)
        {
            try
            {
                ChargingStationDAO stationDao = new ChargingStationDAO(DAOController.MyConnection);
                ChargingStation chargingSt = stationDao.Get(chargingStationId);


                if (chargingSt == null || !body.Id.Equals(chargingStationId))
                {
                    return StatusCode(404);
                }

                stationDao.Update(body);
            }
            catch (Exception)
            {
                return StatusCode(400);
            }
            return StatusCode(200);
        }
    }
}

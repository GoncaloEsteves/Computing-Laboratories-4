/*
 * PlugGoBeyond
 *
 * Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Informática
 *
 * OpenAPI spec version: 1.0.0
 * Contact: a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.IdentityModel.Tokens;
using System.Security.Cryptography;
using IO.Swagger.DataAcess;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;

namespace IO.Swagger.Security
{
    [DataContract]
    public class TokenDetails
    {
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "username")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name = "expirationDate")]
        public DateTime ExpirationDate { get; set; }


        /// <summary>
        /// Returns true if TokenDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenDetails other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) &&
                (
                    Token == other.Token ||
                    Token != null &&
                    Token.Equals(other.Token)
                ) &&
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                );

        }

        [DataContract]
        public static class TokensManager
        {

            /// <summary>
            /// Creates Hashtable  key is the username, value is the token
            /// </summary>
            [DataMember(Name = "BlackList")]
            public static List<TokenDetails> BlackList = new List<TokenDetails>();


            private static byte[] generateSecret(string password)
            {

                // Create a SHA256, ComputeHash - returns byte array 
                byte[] key = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(password));

                return key;
            }

            private static string getUserName(JwtSecurityToken jwtToken)
            {
                string userName = null;
                foreach (var x in jwtToken.Claims)
                {
                    if (x.Type.Equals("unique_name"))
                    {
                        userName = x.Value;
                        break;
                    }
                }

                return userName;
            }

            public static ClaimsPrincipal validateToken(string token)
            {
                try
                {
                    JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
                    JwtSecurityToken jwtToken = (JwtSecurityToken)tokenHandler.ReadToken(token);

                    if (jwtToken == null)
                        return null;

                    string userName = getUserName(jwtToken);
                    if (userName == null)
                    {
                        return null;
                    }

                    UserDAO newUserDao = new UserDAO(DAOController.MyConnection);
                    string password = newUserDao.GetPassword(userName);
                    byte[] key = generateSecret(password);
                    TokenValidationParameters parameters = new TokenValidationParameters()
                    {
                        RequireExpirationTime = true,
                        ValidateIssuer = false,
                        ValidateAudience = false,
                        IssuerSigningKey = new SymmetricSecurityKey(key)
                    };

                    //Verify if token is in blackListToken
                    foreach (TokenDetails t in BlackList)
                    {
                        if (t.UserName.Equals(userName) && t.Token.Equals(token))
                        {
                            throw new Exception("Token is not valid.");
                        }
                    }

                    SecurityToken securityToken;
                    ClaimsPrincipal principal = tokenHandler.ValidateToken(token,
                          parameters, out securityToken);

                    return principal;
                }
                catch (Exception e)
                {
                    return null;
                }
            }

            public static string generateToken(string username, string password, DateTime now)
            {

                byte[] key = generateSecret(password);

                SecurityKey securityKey = new SymmetricSecurityKey(key);

                SecurityTokenDescriptor descriptor = new SecurityTokenDescriptor
                {
                    Subject = new ClaimsIdentity(new[] {
                    new Claim(ClaimTypes.Name, username)}),
                    Expires = DateTime.UtcNow.AddHours(12),
                    SigningCredentials = new SigningCredentials(
                                   securityKey, SecurityAlgorithms.HmacSha256Signature)
                };

                JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler();
                JwtSecurityToken token = handler.CreateJwtSecurityToken(descriptor);

                return handler.WriteToken(token);
            }

            public static void blackListToken(string userName, string token)
            {
                JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
                JwtSecurityToken jwtToken = (JwtSecurityToken)tokenHandler.ReadToken(token);

                TokenDetails tokenDetailed = new TokenDetails();
                tokenDetailed.UserName = userName;
                tokenDetailed.Token = token;
                tokenDetailed.ExpirationDate = jwtToken.ValidTo;

                Monitor.Enter(TokenDetails.TokensManager.BlackList);
                BlackList.Add(tokenDetailed);
                Monitor.Exit(TokenDetails.TokensManager.BlackList);
            }


            public static void removeTokensExpired()
            {
                bool run = true;
                Task<bool> obTask = Task.Run(() =>
                {
                    while (run) {
                        Monitor.Enter(TokenDetails.TokensManager.BlackList);
                        foreach (TokenDetails t in BlackList)
                            {
                            if (t.ExpirationDate < DateTime.Now) {
                                     BlackList.Remove(t);
                                }
                            }
                        Monitor.Exit(TokenDetails.TokensManager.BlackList);
                        Thread.Sleep(20000);
                    }
                    return true;
                });
            }
        }
    }
   
}

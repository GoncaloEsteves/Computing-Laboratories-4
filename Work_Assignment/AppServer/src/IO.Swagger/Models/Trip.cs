/*
 * PlugGoBeyond
 *
 * Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Inform√°tica
 *
 * OpenAPI spec version: 1.0.0
 * Contact: a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Trip : IEquatable<Trip>
    { 
        /// <summary>
        /// Gets or Sets TripId
        /// </summary>
        [DataMember(Name="tripId")]
        public int? TripId { get; set; }

        /// <summary>
        /// Gets or Sets TripName
        /// </summary>
        [DataMember(Name="tripName")]
        public string TripName { get; set; }

        /// <summary>
        /// Gets or Sets VehicleRegistrationNumber
        /// </summary>
        [DataMember(Name="vehicleRegistrationNumber")]
        public string VehicleRegistrationNumber { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin")]
        public Position Origin { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination")]
        public Position Destination { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration")]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost")]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Array that contains all of the charging stations id&#x27;s used during the trip
        /// </summary>
        /// <value>Array that contains all of the charging stations id&#x27;s used during the trip</value>
        [DataMember(Name="usedChargingStations")]
        public List<string> UsedChargingStations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trip {\n");
            sb.Append("  TripId: ").Append(TripId).Append("\n");
            sb.Append("  TripName: ").Append(TripName).Append("\n");
            sb.Append("  VehicleRegistrationNumber: ").Append(VehicleRegistrationNumber).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  UsedChargingStations: ").Append(UsedChargingStations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Trip)obj);
        }

        /// <summary>
        /// Returns true if Trip instances are equal
        /// </summary>
        /// <param name="other">Instance of Trip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trip other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TripId == other.TripId ||
                    TripId != null &&
                    TripId.Equals(other.TripId)
                ) && 
                (
                    TripName == other.TripName ||
                    TripName != null &&
                    TripName.Equals(other.TripName)
                ) && 
                (
                    VehicleRegistrationNumber == other.VehicleRegistrationNumber ||
                    VehicleRegistrationNumber != null &&
                    VehicleRegistrationNumber.Equals(other.VehicleRegistrationNumber)
                ) && 
                (
                    Origin == other.Origin ||
                    Origin != null &&
                    Origin.Equals(other.Origin)
                ) && 
                (
                    Destination == other.Destination ||
                    Destination != null &&
                    Destination.Equals(other.Destination)
                ) && 
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) && 
                (
                    Cost == other.Cost ||
                    Cost != null &&
                    Cost.Equals(other.Cost)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    UsedChargingStations == other.UsedChargingStations ||
                    UsedChargingStations != null &&
                    UsedChargingStations.SequenceEqual(other.UsedChargingStations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TripId != null)
                    hashCode = hashCode * 59 + TripId.GetHashCode();
                    if (TripName != null)
                    hashCode = hashCode * 59 + TripName.GetHashCode();
                    if (VehicleRegistrationNumber != null)
                    hashCode = hashCode * 59 + VehicleRegistrationNumber.GetHashCode();
                    if (Origin != null)
                    hashCode = hashCode * 59 + Origin.GetHashCode();
                    if (Destination != null)
                    hashCode = hashCode * 59 + Destination.GetHashCode();
                    if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                    if (Cost != null)
                    hashCode = hashCode * 59 + Cost.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (UsedChargingStations != null)
                    hashCode = hashCode * 59 + UsedChargingStations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Trip left, Trip right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Trip left, Trip right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * PlugGoBeyond
 *
 * Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Inform√°tica
 *
 * OpenAPI spec version: 1.0.0
 * Contact: a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ChargingStationWaitingValidation : IEquatable<ChargingStationWaitingValidation>
    { 
        /// <summary>
        /// Gets or Sets NameChargingStation
        /// </summary>
        [DataMember(Name="nameChargingStation")]
        public string NameChargingStation { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name="street")]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets LocationType
        /// </summary>
        [DataMember(Name="locationType")]
        public string LocationType { get; set; }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name="accessType")]
        public string AccessType { get; set; }

        /// <summary>
        /// Gets or Sets Restritions
        /// </summary>
        [DataMember(Name="restritions")]
        public string Restritions { get; set; }

        /// <summary>
        /// Gets or Sets AditionalInfo
        /// </summary>
        [DataMember(Name="aditionalInfo")]
        public string AditionalInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargingStationWaitingValidation {\n");
            sb.Append("  NameChargingStation: ").Append(NameChargingStation).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  Restritions: ").Append(Restritions).Append("\n");
            sb.Append("  AditionalInfo: ").Append(AditionalInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ChargingStationWaitingValidation)obj);
        }

        /// <summary>
        /// Returns true if ChargingStationWaitingValidation instances are equal
        /// </summary>
        /// <param name="other">Instance of ChargingStationWaitingValidation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargingStationWaitingValidation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NameChargingStation == other.NameChargingStation ||
                    NameChargingStation != null &&
                    NameChargingStation.Equals(other.NameChargingStation)
                ) && 
                (
                    Street == other.Street ||
                    Street != null &&
                    Street.Equals(other.Street)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    LocationType == other.LocationType ||
                    LocationType != null &&
                    LocationType.Equals(other.LocationType)
                ) && 
                (
                    AccessType == other.AccessType ||
                    AccessType != null &&
                    AccessType.Equals(other.AccessType)
                ) && 
                (
                    Restritions == other.Restritions ||
                    Restritions != null &&
                    Restritions.Equals(other.Restritions)
                ) && 
                (
                    AditionalInfo == other.AditionalInfo ||
                    AditionalInfo != null &&
                    AditionalInfo.Equals(other.AditionalInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NameChargingStation != null)
                    hashCode = hashCode * 59 + NameChargingStation.GetHashCode();
                    if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (LocationType != null)
                    hashCode = hashCode * 59 + LocationType.GetHashCode();
                    if (AccessType != null)
                    hashCode = hashCode * 59 + AccessType.GetHashCode();
                    if (Restritions != null)
                    hashCode = hashCode * 59 + Restritions.GetHashCode();
                    if (AditionalInfo != null)
                    hashCode = hashCode * 59 + AditionalInfo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ChargingStationWaitingValidation left, ChargingStationWaitingValidation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ChargingStationWaitingValidation left, ChargingStationWaitingValidation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * PlugGoBeyond
 *
 * Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Inform√°tica
 *
 * OpenAPI spec version: 1.0.0
 * Contact: a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ChargingStation : IEquatable<ChargingStation>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location")]
        public Position Location { get; set; }

        /// <summary>
        /// Gets or Sets ChargingStationOperator
        /// </summary>
        [DataMember(Name="chargingStationOperator")]
        public ChargingStationOperator ChargingStationOperator { get; set; }

        /// <summary>
        /// Status of the charging station
        /// </summary>
        /// <value>Status of the charging station</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum UNKNOWNEnum for UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWNEnum = 0,
            /// <summary>
            /// Enum AVAILABLEEnum for AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLEEnum = 1,
            /// <summary>
            /// Enum NOTAVAILABLEEnum for NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLEEnum = 2,
            /// <summary>
            /// Enum INUSEEnum for IN_USE
            /// </summary>
            [EnumMember(Value = "IN_USE")]
            INUSEEnum = 3,
            /// <summary>
            /// Enum UNDERCONSTRUCTIONEnum for UNDER_CONSTRUCTION
            /// </summary>
            [EnumMember(Value = "UNDER_CONSTRUCTION")]
            UNDERCONSTRUCTIONEnum = 4        }

        /// <summary>
        /// Status of the charging station
        /// </summary>
        /// <value>Status of the charging station</value>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets PriceByActivation
        /// </summary>
        [DataMember(Name="priceByActivation")]
        public double? PriceByActivation { get; set; }

        /// <summary>
        /// Gets or Sets PriceByMinute
        /// </summary>
        [DataMember(Name="priceByMinute")]
        public double? PriceByMinute { get; set; }

        /// <summary>
        /// Gets or Sets PriceByKwh
        /// </summary>
        [DataMember(Name="priceByKwh")]
        public double? PriceByKwh { get; set; }

        /// <summary>
        /// Gets or Sets WaitingToCharge
        /// </summary>
        [DataMember(Name="waitingToCharge")]
        public decimal? WaitingToCharge { get; set; }

        /// <summary>
        /// Gets or Sets ChargingSockets
        /// </summary>
        [DataMember(Name="chargingSockets")]
        public List<Connector> ChargingSockets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargingStation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ChargingStationOperator: ").Append(ChargingStationOperator).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PriceByActivation: ").Append(PriceByActivation).Append("\n");
            sb.Append("  PriceByMinute: ").Append(PriceByMinute).Append("\n");
            sb.Append("  PriceByKwh: ").Append(PriceByKwh).Append("\n");
            sb.Append("  WaitingToCharge: ").Append(WaitingToCharge).Append("\n");
            sb.Append("  ChargingSockets: ").Append(ChargingSockets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ChargingStation)obj);
        }

        /// <summary>
        /// Returns true if ChargingStation instances are equal
        /// </summary>
        /// <param name="other">Instance of ChargingStation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargingStation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    ChargingStationOperator == other.ChargingStationOperator ||
                    ChargingStationOperator != null &&
                    ChargingStationOperator.Equals(other.ChargingStationOperator)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    PriceByActivation == other.PriceByActivation ||
                    PriceByActivation != null &&
                    PriceByActivation.Equals(other.PriceByActivation)
                ) && 
                (
                    PriceByMinute == other.PriceByMinute ||
                    PriceByMinute != null &&
                    PriceByMinute.Equals(other.PriceByMinute)
                ) && 
                (
                    PriceByKwh == other.PriceByKwh ||
                    PriceByKwh != null &&
                    PriceByKwh.Equals(other.PriceByKwh)
                ) && 
                (
                    WaitingToCharge == other.WaitingToCharge ||
                    WaitingToCharge != null &&
                    WaitingToCharge.Equals(other.WaitingToCharge)
                ) && 
                (
                    ChargingSockets == other.ChargingSockets ||
                    ChargingSockets != null &&
                    ChargingSockets.SequenceEqual(other.ChargingSockets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (ChargingStationOperator != null)
                    hashCode = hashCode * 59 + ChargingStationOperator.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (PriceByActivation != null)
                    hashCode = hashCode * 59 + PriceByActivation.GetHashCode();
                    if (PriceByMinute != null)
                    hashCode = hashCode * 59 + PriceByMinute.GetHashCode();
                    if (PriceByKwh != null)
                    hashCode = hashCode * 59 + PriceByKwh.GetHashCode();
                    if (WaitingToCharge != null)
                    hashCode = hashCode * 59 + WaitingToCharge.GetHashCode();
                    if (ChargingSockets != null)
                    hashCode = hashCode * 59 + ChargingSockets.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ChargingStation left, ChargingStation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ChargingStation left, ChargingStation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

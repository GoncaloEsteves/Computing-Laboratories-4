/*
 * PlugGoBeyond
 *
 * Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Inform√°tica
 *
 * OpenAPI spec version: 1.0.0
 * Contact: a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Connector : IEquatable<Connector>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Status of the connector
        /// </summary>
        /// <value>Status of the connector</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum UNKNOWNEnum for UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWNEnum = 0,
            /// <summary>
            /// Enum AVAILABLEEnum for AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLEEnum = 1,
            /// <summary>
            /// Enum NOTAVAILABLEEnum for NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLEEnum = 2,
            /// <summary>
            /// Enum INUSEEnum for IN_USE
            /// </summary>
            [EnumMember(Value = "IN_USE")]
            INUSEEnum = 3,
            /// <summary>
            /// Enum UNDERCONSTRUCTIONEnum for UNDER_CONSTRUCTION
            /// </summary>
            [EnumMember(Value = "UNDER_CONSTRUCTION")]
            UNDERCONSTRUCTIONEnum = 4        }

        /// <summary>
        /// Status of the connector
        /// </summary>
        /// <value>Status of the connector</value>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets PowerKw
        /// </summary>
        [DataMember(Name="powerKw")]
        public double? PowerKw { get; set; }

        /// <summary>
        /// Gets or Sets Amps
        /// </summary>
        [DataMember(Name="amps")]
        public decimal? Amps { get; set; }

        /// <summary>
        /// Gets or Sets Voltage
        /// </summary>
        [DataMember(Name="voltage")]
        public decimal? Voltage { get; set; }

        /// <summary>
        /// Phase type of the connector
        /// </summary>
        /// <value>Phase type of the connector</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PhaseEnum
        {
            /// <summary>
            /// Enum UNKNOWNEnum for UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWNEnum = 0,
            /// <summary>
            /// Enum SINGLEPHASEACEnum for SINGLE_PHASE_AC
            /// </summary>
            [EnumMember(Value = "SINGLE_PHASE_AC")]
            SINGLEPHASEACEnum = 1,
            /// <summary>
            /// Enum THREEPHASEACEnum for THREE_PHASE_AC
            /// </summary>
            [EnumMember(Value = "THREE_PHASE_AC")]
            THREEPHASEACEnum = 2,
            /// <summary>
            /// Enum DCEnum for DC
            /// </summary>
            [EnumMember(Value = "DC")]
            DCEnum = 3        }

        /// <summary>
        /// Phase type of the connector
        /// </summary>
        /// <value>Phase type of the connector</value>
        [DataMember(Name="phase")]
        public PhaseEnum? Phase { get; set; }

        /// <summary>
        /// Type of connector
        /// </summary>
        /// <value>Type of connector</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ConnectorTypeEnum
        {
            /// <summary>
            /// Enum UNKNOWNEnum for UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWNEnum = 0,
            /// <summary>
            /// Enum CHADEMOEnum for CHADEMO
            /// </summary>
            [EnumMember(Value = "CHADEMO")]
            CHADEMOEnum = 1,
            /// <summary>
            /// Enum CCSEnum for CCS
            /// </summary>
            [EnumMember(Value = "CCS")]
            CCSEnum = 2,
            /// <summary>
            /// Enum TYPE2Enum for TYPE2
            /// </summary>
            [EnumMember(Value = "TYPE2")]
            TYPE2Enum = 3,
            /// <summary>
            /// Enum TYPE2TETHEREDEnum for TYPE2_TETHERED
            /// </summary>
            [EnumMember(Value = "TYPE2_TETHERED")]
            TYPE2TETHEREDEnum = 4,
            /// <summary>
            /// Enum TESLADESTINATIONCHARGEREnum for TESLA_DESTINATION_CHARGER
            /// </summary>
            [EnumMember(Value = "TESLA_DESTINATION_CHARGER")]
            TESLADESTINATIONCHARGEREnum = 5,
            /// <summary>
            /// Enum TESLASUPERCHARGEREnum for TESLA_SUPERCHARGER
            /// </summary>
            [EnumMember(Value = "TESLA_SUPERCHARGER")]
            TESLASUPERCHARGEREnum = 6        }

        /// <summary>
        /// Type of connector
        /// </summary>
        /// <value>Type of connector</value>
        [DataMember(Name="connectorType")]
        public ConnectorTypeEnum? ConnectorType { get; set; }

        /// <summary>
        /// Charging rate of the connector
        /// </summary>
        /// <value>Charging rate of the connector</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RateEnum
        {
            /// <summary>
            /// Enum NORMALEnum for NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMALEnum = 0,
            /// <summary>
            /// Enum FASTEnum for FAST
            /// </summary>
            [EnumMember(Value = "FAST")]
            FASTEnum = 1        }

        /// <summary>
        /// Charging rate of the connector
        /// </summary>
        /// <value>Charging rate of the connector</value>
        [DataMember(Name="rate")]
        public RateEnum? Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Connector {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PowerKw: ").Append(PowerKw).Append("\n");
            sb.Append("  Amps: ").Append(Amps).Append("\n");
            sb.Append("  Voltage: ").Append(Voltage).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  ConnectorType: ").Append(ConnectorType).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Connector)obj);
        }

        /// <summary>
        /// Returns true if Connector instances are equal
        /// </summary>
        /// <param name="other">Instance of Connector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Connector other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    PowerKw == other.PowerKw ||
                    PowerKw != null &&
                    PowerKw.Equals(other.PowerKw)
                ) && 
                (
                    Amps == other.Amps ||
                    Amps != null &&
                    Amps.Equals(other.Amps)
                ) && 
                (
                    Voltage == other.Voltage ||
                    Voltage != null &&
                    Voltage.Equals(other.Voltage)
                ) && 
                (
                    Phase == other.Phase ||
                    Phase != null &&
                    Phase.Equals(other.Phase)
                ) && 
                (
                    ConnectorType == other.ConnectorType ||
                    ConnectorType != null &&
                    ConnectorType.Equals(other.ConnectorType)
                ) && 
                (
                    Rate == other.Rate ||
                    Rate != null &&
                    Rate.Equals(other.Rate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (PowerKw != null)
                    hashCode = hashCode * 59 + PowerKw.GetHashCode();
                    if (Amps != null)
                    hashCode = hashCode * 59 + Amps.GetHashCode();
                    if (Voltage != null)
                    hashCode = hashCode * 59 + Voltage.GetHashCode();
                    if (Phase != null)
                    hashCode = hashCode * 59 + Phase.GetHashCode();
                    if (ConnectorType != null)
                    hashCode = hashCode * 59 + ConnectorType.GetHashCode();
                    if (Rate != null)
                    hashCode = hashCode * 59 + Rate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Connector left, Connector right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Connector left, Connector right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

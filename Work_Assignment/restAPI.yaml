openapi: "3.0.0"
info:
  description: "Rest API of the mobile app PlugGoBeyond of the project course LI IV in the program Mestrado Integrado em Engenharia Inform√°tica"
  version: "1.0.0"
  title: "PlugGoBeyond"
  termsOfService: "http://swagger.io/terms" # criar pagina
  contact:
    email: "a34900/a82888/a85731/a86618/a89982@alunos.uminho.pt"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "users"
  description: "Operations in the users."
- name: "vehicles"
  description: "Operations in the vehicles."
- name: "trips"
  description: "Operations in the trips."
- name: "chargingStations"
  description: "Operations in the charging stations."
- name: "vehicleModels"
  description: "Operations in the models of the vehicles."
- name: "stationWithoutValidation"
  description: "Operations in the charging stations that were not validated by the system yet."

  
paths:
  /users:
    post:
      tags:
      - "users"
      summary: "Add a new user to the system."
      description: ""
      operationId: "addUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: "Success."
        400:
          description: "Invalid parameter."
    get:
      tags:
      - "users"
      summary: "List all registered users."
      description: ""
      operationId: "findUsers"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: "Error in the operation."

  /users/{username}:
    get:
      tags:
      - "users"
      summary: "Find user by a given username."
      description: "Returns only the user with that username."
      operationId: "getUserByUsername"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Invalid username."
        404:
          description: "User not found."
    put:
      tags:
      - "users"
      summary: "Update a user."
      description: ""
      operationId: "updateUser"
      parameters:
      - name: "username"
        in: "path"
        description: "Username id that needs to be updated."
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        description: "Updates the user."
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/User"
      responses:
        400:
          description: "Invalid username."
        404:
          description: "User not found."
    
    delete:
      tags:
      - "users"
      summary: "Removes a user."
      description: ""
      operationId: "deleteUser"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user to be removed from the system."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:      # Request body contents
                $ref: "#/components/schemas/User"
        400:
          description: "Invalid username."
        404:
          description: "User not found."
          
  /users/{username}/manage/password:
    put:
      tags:
      - "users"
      summary: "Update user password."
      description: ""
      operationId: "updatePassword"
      parameters:
      - name: "username"
        in: "path"
        description: "Username id that wants to update password."
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/ChangePassword"
      responses:
        400:
          description: "Invalid username."
        404:
          description: "User not found."
  
  /users/{username}/manage/creditCards:
    post:
      tags:
      - "users"
      summary: "Add a new credit card to a user."
      description: ""
      operationId: "addCreditCard"
      parameters:
      - name: "username"
        in: "path"
        description: "Username id that wants to add a credit card."
        required: true
        schema:
          type: "string"       
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/CreditCard"
      responses:
        200:
          description: "Success."
        400:
          description: "Invalid parameter."
    get:
      tags:
      - "users"
      summary: "Get all credit cards from a user."
      description: ""
      operationId: "getCreditCard"
      parameters:
      - name: "username"
        in: "path"
        description: "Username id to get all credit cards."
        required: true
        schema:
          type: "string"       
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CreditCard"
        400:
          description: "Error in the operation."
    
  /users/{username}/manage/creditCards/{creditCardNr}: 
    get:
      tags:
      - "users"
      summary: "Get a credit cards from a user."
      description: ""
      operationId: "getOneCreditCard"
      parameters:
      - name: "username"
        in: "path"
        description: "Username id to get one credit card."
        required: true
        schema:
          type: "string"
      - name: "creditCardNr"
        in: "path"
        description: "Credit card number needs to be found."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                  $ref: "#/components/schemas/CreditCard"
        400:
          description: "Error in the operation."
        404:
          description: "Card not found."
  
    delete:
      tags:
      - "users"
      summary: "Removes a given credit card from a user."
      description: ""
      operationId: "deleteCreditCard"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user that want to delete the credit card."
        required: true
        schema:
          type: "string"
      - name: "creditCardNr"
        in: "path"
        description: "Credit card number needs to be removed from the user."
        required: true
        schema:
          type: "string"
      responses:
        400:
          description: "Invalid id."
        404:
          description: "User not found."          

  /users/{username}/manage/favorites:
    post:
      tags:
      - "users"
      summary: "Add a new favorite charging station to the user."
      description: ""
      operationId: "addFavChargingStation"
      parameters:
      - name: "username"
        in: "path"
        description: "Username id that wants to add a new charging station."
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        description: "The id of the charging station to be added to the favorites of the user."
        content:
          application/json:
            schema:      # Request body contents
               $ref: "#/components/schemas/FavoriteStations"
      responses:
        200:
          description: "Success."
        400:
          description: "Invalid parameter."
          
    get:
      tags:
      - "users"
      summary: "List all favorites charging stations of a user."
      description: "Returns the favorites charging stations of a given user."
      operationId: "getUserFavChargingStations"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
        400:
          description: "Invalid username."
        404:
          description: "User not found."
          
  /users/{username}/manage/favorites/{chargingStationId}:           
    delete:
        tags:
        - "users"
        summary: "Delete a favorite charging station of the user."
        description: ""
        operationId: "deleteFavoriteStation"
        parameters:
        - name: "username"
          in: "path"
          description: "Username id that one of his favorite stations will be deleted."
          required: true
          schema:
            type: "string"
        - name: "chargingStationId"  
          in: "path"
          description: "The id of the charging station to be deleted of the favorites of the user."
          required: true
          schema:
            type: "string" 
        responses:
          204:
            description: "No Content."        

  /users/{username}/manage/trips:
    get:
      tags:
      - "users"
      summary: "Get all the trips made by a user."
      description: ""
      operationId: "getUserTrips"
      parameters:
      - name: "username"
        in: "path"
        description: "Username id that wants to get the trips."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Trip"
        400:
          description: "Error during the operation."
            
  /users/{username}/manage/vehicles:
    get:
      tags:
      - "users"
      summary: "Get all vehicles of a given user."
      description: ""
      operationId: "getUserVehicles"
      parameters:
      - name: "username"
        in: "path"
        description: "Username id that wants to get the vehicles."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Vehicle"
        400:
          description: "Error during the operation."


  /users/login:
    post:
      tags:
      - "users"
      summary: "Login a user into the system."
      description: ""
      operationId: "loginUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
                $ref: "#/components/schemas/LoginInfo"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                type: "string"
          headers:
            X-Rate-Limit:
              schema:
                type: "integer"
                format: "int32"
              description: "Calls per hour allowed by the user."
            X-Expires-After:
              schema:
                type: "string"
                format: "date-time"
              description: "Date in UTC when token expires."
        400:
          description: "Invalid username or password."

  /users/logout:
    delete:
      tags:
      - "users"
      summary: "Quit session of the user."
      description: ""
      operationId: "logoutUser"
      parameters: []
      responses:
        default:
          description: "Success."
          
  /trips:
    post:
      tags:
      - "trips"
      summary: "Add a trip into the system."
      description: ""
      operationId: "addTrip"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/TripInfo"
      responses:
        200:
          description: "Success."
        400:
          description: "Invalid parameter."
    get:
      tags:
      - "trips"
      summary: "List all trips."
      description: ""
      operationId: "findTrips"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Trip"
        400:
          description: "Error during the operation."
          
  /trips/filterByIds:
     get:
      tags:
      - "trips"
      summary: "Find all trips by the ids given."
      description: "Multiple trips can be requested to be given. It's only required that they have a comma token to separate them."
      operationId: "findTripsByIds"
      parameters:
      - name: "ids"
        in: "query"
        description: "Ids of the trips."
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        explode: false
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Trip"
        400:
          description: "Invalid ids."      
          
  /trips/{tripId}:
    get:
      tags:
      - "trips"
      summary: "Find a trip by a given ID."
      description: "Returns a trip."
      operationId: "getTripById"
      parameters:
      - name: "tripId"
        in: "path"
        description: ""
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Trip"
        400:
          description: "Invalid id."
        404:
          description: "Trip not found."
          
    put:
      tags:
      - "trips"
      summary: "Update a trip."
      description: ""
      operationId: "updateTrip"
      parameters:
      - name: "tripId"
        in: "path"
        description: "Trip id that needs to be updated."
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/Trip"
      responses:
        400:
          description: "Invalid id."
        404:
          description: "Trip not found."
   
    delete:
      tags:
      - "trips"
      summary: "Removes a trip."
      description: ""
      operationId: "deleteTrip"
      parameters:
      - name: "username"
        in: "query"
        description: "Username of the user that want to delete the trip."
        required: true
        schema:
          type: "string"
      - name: "tripId"
        in: "path"
        description: "Trip id that needs to be removed from the system."
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        400:
          description: "Invalid id."
        404:
          description: "Trip not found."
          
          
  /chargingStations:
    post:
      tags:
      - "chargingStations"
      summary: "Add a new charging station into the system."
      description: ""
      operationId: "addChargingStation"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/ChargingStation"
      responses:
        200:
          description: "Success."
        400:
          description: "Invalid parameter."
    get:
      tags:
      - "chargingStations"
      summary: "List all charging stations."
      description: ""
      operationId: "findChargingStation"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:      # Request body contents
                type: "array"
                items:
                  $ref: "#/components/schemas/ChargingStation"
        400:
          description: "Error during operation."
          
  
  /chargingStations/filterByIds:
     get:
      tags:
      - "chargingStations"
      summary: "Find all charging stations by the ids given."
      description: "Multiple charging stations can be requested to be given. It's only required that they have a comma token to separate them."
      operationId: "findChargingStationsByIds"
      parameters:
      - name: "ids"
        in: "query"
        description: "Ids of the charging stations."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
        explode: false
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ChargingStation"
        400:
          description: "Invalid ids."        
          

  /chargingStations/{chargingStationId}:
    get:
      tags:
      - "chargingStations"
      summary: "Find a charging station by a given id."
      description: "Returns the charging station that matches the id."
      operationId: "getStationById"
      parameters:
      - name: "chargingStationId"
        in: "path"
        description: ""
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success."
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ChargingStation"
        400:
          description: "Invalid id."
        404:
          description: "Charging station not found."
          
    put:
      tags:
      - "chargingStations"
      summary: "Updates a charging station."
      description: ""
      operationId: "updateStation"
      parameters:
      - name: "chargingStationId"
        in: "path"
        description: "Charging station id that needs to be updated."
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/ChargingStation"
      responses:
        400:
          description: "Invalid id."
        404:
          description: "Charging station not found."
   
    delete:
      tags:
      - "chargingStations"
      summary: "Removes a charging station."
      description: ""
      operationId: "deleteChargingStation"
      parameters:
      - name: "chargingStationId"
        in: "path"
        description: "Charging station id that needs to be removed."
        required: true
        schema:
          type: "string"
      responses:
        400:
          description: "Invalid id"
        404:
          description: "Charging station not found."
  
  /chargingStations/findByStatus:
     get:
      tags:
      - "chargingStations"
      summary: "Find all charging stations by a given status."
      description: "Multiple status can be requested to be filted. It's only required that they have a comma token to separate them."
      operationId: "findChargingStationByStatus"
      parameters:
      - name: "status"
        in: "query"
        description: "Status to filter the charging stations."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
            enum:
              - "UNKNOWN"
              - "AVAILABLE"
              - "NOT_AVAILABLE"
              - "IN_USE"
              - "UNDER_CONSTRUCTION"
          default: "AVAILABLE"
        explode: false
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ChargingStation"
        400:
          description: "Invalid status."
          
          
  /chargingStations/findByFastConnector:
     get:
      tags:
      - "chargingStations"
      summary: "Find all charging stations with a fast connector."
      description: ""
      operationId: "findFastChargingStations"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ChargingStation"
        400:
          description: "Error during operation"
          
  /vehicles:
    post:
      tags:
      - "vehicles"
      summary: "Add a vehicle into the system."
      description: ""
      operationId: "addVehicle"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/VehicleInfo"
      responses:
        200:
          description: "Success."
        400:
          description: "Invalid Parameter."
    get:
      tags:
      - "vehicles"
      summary: "List all vehicles."
      description: ""
      operationId: "findVehicles"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Vehicle"
        400:
          description: "Operation error."
    
  /vehicles/filterByIds:
    get:
      tags:
      - "vehicles"
      summary: "Find all trips by the ids given."
      description: "Multiple vehicles can be requested to be given. It's only required that they have a comma token to separate them."
      operationId: "findVehiclesByIds"
      parameters:
      - name: "ids"
        in: "query"
        description: "Ids of the vehicles."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
        explode: false
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:          
                type: "array"
                items:
                  $ref: "#/components/schemas/Vehicle"
        400:
          description: "Invalid ids."        
          
  
  /vehicles/{registrationNr}:
    get:
      tags:
      - "vehicles"
      summary: "Find a vehicle by it's registration number."
      description: "Returns the vehicle"
      operationId: "getVehicleByRegsNr"
      parameters:
      - name: "registrationNr"
        in: "path"
        description: ""
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        400:
          description: "Invalid registration number."
        404:
          description: "Vehicle not found."
      
          
    put:
      tags:
      - "vehicles"
      summary: "Updates a vehicle."
      description: ""
      operationId: "updateVehicle"
      parameters:
      - name: "registrationNr"
        in: "path"
        description: "Registration number of the vehicle that needs to be updated."
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents  
              $ref: "#/components/schemas/Vehicle"
      responses:
        400:
          description: "Invalid registration number."
        404:
          description: "Vehicle not found."      
    
    delete:
      tags:
      - "vehicles"
      summary: "Removes a vehicle."
      description: ""
      operationId: "deleteVehicle"
      parameters:
      - name: "username"
        in: "query"
        description: "Username of the user that want to delete the vehicle."
        required: true
        schema:
          type: "string"
      - name: "registrationNr"
        in: "path"
        description: "Registration number of the vehicle that needs to be removed."
        required: true
        schema:
          type: "string"
      responses:
        400:
          description: "Invalid registration number."
        404:
          description: "Vehicle not found."
 
  /vehicles/{registrationNr}/getTypeCode:
    get:
      tags:
      - "vehicles"
      summary: "Find a vehicle's type code by it's registration number."
      description: "Returns the vehicle's type code."
      operationId: "getVehicleTypeCode"
      parameters:
      - name: "registrationNr"
        in: "path"
        description: "Registration number of the vehicle that we want to extract type code."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                type: "string"
        400:
          description: "Invalid registration number."
        404:
          description: "Vehicle not found."    
  
  /vehicles/{registrationNr}/putConsumption:
    put:
      tags:
      - "vehicles"
      summary: "Updates the last consumption of a vehicle."
      description: "Returns success if the operation is completed."
      operationId: "updateLastConsumption"
      parameters:
      - name: "registrationNr"
        in: "path"
        description: "Registration number of the vehicle that needs to be updated."
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateConsumption"
      responses:
        200:
          description: "Success."
        400:
          description: "Invalid registration number."
        404:
          description: "Vehicle not found."    
  
  /vehicleModels:
    get:
      tags:
        - "vehicleModels"
      summary: "List all vehiclesModels."
      description: "Find all the models of eletric vehicles."
      operationId: "findVehiclesModels"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VehicleModels"
        400:
          description: "Operation error." 
    
    post:
      tags:
         - "vehicleModels"
      summary: "Add a vehicle's model into the system."
      description: "Inserts a new model into the system."
      operationId: "addVehicleModel"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/VehicleModels"
      responses:
        200:
          description: "Success."
        400:
          description: "Invalid Parameter."
    
  /vehicleModels/{typeCode}:
    put:
      tags:
        - "vehicleModels"
      summary: "Updates a vehicle's model."
      description: ""
      operationId: "updateVehicleModel"
      parameters:
      - name: "typeCode"
        in: "path"
        description: "TypeCode of the model that needs to be updated."
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents  
              $ref: "#/components/schemas/VehicleModels"
      responses:
        400:
          description: "Invalid TypeCode."
        404:
          description: "Model of Vehicle not found."  
  
    get:
      tags:
         - "vehicleModels"
      summary: "Finds a model of a vehicle with a certain typeCode."
      description: "Returns the model that has a specific typeCode."
      operationId: "findVehicleModel"
      parameters:
      - name: "typeCode"
        in: "path"
        description: "TypeCode of the model that we want to find."
        required: true
        schema:
         type: "string"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleModels"
        400:
          description: "Invalid TypeCode." 
        404:
          description: "Model of vehicle not found."
  
    delete:
      tags:
        - "vehicleModels"
      summary: "Removes a vehicle."
      description: "Deletes a model."
      operationId: "deleteVehicleModel"
      parameters:
      - name: "typeCode"
        in: "path"
        description: "typeCode of the model that needs to be removed."
        required: true
        schema:
          type: "string"
      responses:
        400:
          description: "Invalid typeCode."
        404:
          description: "TypeCode not found."
          
  
  /chargingStationWaitingValidation:
    get:
      tags:
        - "stationWithoutValidation"
      summary: "List all Charging Stations Waiting Validation."
      description: "Returns all stations that were not yet considered valid by the system."
      operationId: "findStationWaitingValidation"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ChargingStationWaitingValidation"
        400:
          description: "Operation error." 
    
    post:
      tags:
      - "stationWithoutValidation"
      summary: "Add a Stations Waiting Validation into the system."
      description: "Inserts a new station waiting validation."
      operationId: "addStationWithoutValidation"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents
              $ref: "#/components/schemas/ChargingStationWaitingValidation"
      responses:
        200:
          description: "Success."
        400:
          description: "Invalid Parameter."
  
  /chargingStationWaitingValidation/{nameChargingStation}:       
    put:
      tags:
      - "stationWithoutValidation"
      summary: "Updates a Station without validation."
      description: "Given a certain valid name, a station will be updated."
      operationId: "updateStationWithoutValidation"
      parameters:
      - name: "nameChargingStation"
        in: "path"
        description: "name of the station that needs to be updated."
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:      # Request body contents  
              $ref: "#/components/schemas/ChargingStationWaitingValidation"
      responses:
        400:
          description: "Invalid name of the station."
        404:
          description: "Name of Station not found." 
        
  
    get:
      tags:
        - "stationWithoutValidation"
      summary: "Finds a station by it's name."
      description: "Given a certain valid name, a station will be returned"
      operationId: "findStationWithoutValidationByName"
      parameters:
      - name: "nameChargingStation"
        in: "path"
        description: "Name of the chargingStation that we want to find."
        required: true
        schema:
         type: "string"
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargingStationWaitingValidation"
        400:
          description: "Operation error." 
        404:
          description: "Name of station without validation not found."
    
    delete:
      tags:
      - "stationWithoutValidation"
      summary: "Removes a station without validation."
      description: "Deletes a specific station."
      operationId: "deleteStationWithoutValidation"
      parameters:
      - name: "nameChargingStation"
        in: "path"
        description: "name of the station that needs to be removed."
        required: true
        schema:
          type: "string"
      responses:
        400:
          description: "Invalid name of the station."
        404:
          description: "Name of station without validation not found."
          
          
################################################################
#                      DEFINITIONS SECTION                     #
################################################################           

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    CreditCard:
      type: "object"
      properties:
        cardType:
          type: "string"
        cardNumber:
          type: "string"
        expireDate:
          type: "string"
          format: "date-time"
        cvv:
          type: "integer"
          format: "int32"
  
  
    User:
      type: "object"
      properties:
        name:
          type: "string"
        username:
          type: "string"
        email:
          type: "string"
        nif:
          type: "string"
        password:
          type: "string"
        creditCards:
          type: array
          items:
           $ref: '#/components/schemas/CreditCard'
        favoriteChargingStations:
          type: array
          items: 
            type: "string"
        trips:
          type: array
          items:
            type: "integer"
            format: "int32"
        vehiclesIds:
          type: array
          items:
            type: "string"
            
    Connector:
      type: "object"
      properties:
        id:
          type: "string"
        status:
          type: "string"
          description: "Status of the connector"
          enum:
          - "UNKNOWN"
          - "AVAILABLE"
          - "NOT_AVAILABLE"
          - "IN_USE"
          - "UNDER_CONSTRUCTION"
        powerKw:
          type: "number"
          format: "double"
        amps:
          type: "number"
          format: "int32"
        voltage:
          type: "number"
          format: "int32"
        phase:
          type: "string"
          description: "Phase type of the connector"
          enum:
            - "UNKNOWN"
            - "SINGLE_PHASE_AC"
            - "THREE_PHASE_AC"
            - "DC"
        connectorType:
          type: "string"
          description: "Type of connector"
          enum:
            - "UNKNOWN"
            - "CHADEMO"
            - "CCS"
            - "TYPE2"
            - "TYPE2_TETHERED"
            - "TESLA_DESTINATION_CHARGER"
            - "TESLA_SUPERCHARGER"
        rate:
          type: "string"
          description: "Charging rate of the connector"
          enum:
            - "NORMAL"
            - "FAST"
    
       
    Position:
      type: "object"
      properties:
        latitude:
          type: "number"
          format: "double"
        longitude:
          type: "number"
          format: "double"
    
    
    ChargingStationOperator:
      type: "object"
      properties:
        operatorName:
          type: "string"
        websiteURL:
          type: "string"
          format: "uri"
    
    
    ChargingStation:
      type: "object"
      properties:
        id:
          type: "string"
        location: 
          $ref: '#/components/schemas/Position'
        chargingStationOperator: 
          $ref: '#/components/schemas/ChargingStationOperator'
        status:
          type: "string"
          description: "Status of the charging station"
          enum:
          - "UNKNOWN"
          - "AVAILABLE"
          - "NOT_AVAILABLE"
          - "IN_USE"
          - "UNDER_CONSTRUCTION"
        priceByActivation:
          type: "number"
          format: "double"
        priceByMinute:
          type: "number"
          format: "double"
        priceByKwh:
          type: "number"
          format: "double"
        waitingToCharge:
          type: "number"
          format: "int32"
        chargingSockets:
          type: array
          items:
            $ref: '#/components/schemas/Connector'
   
    ChargingStationWaitingValidation:
      type: "object"
      properties:
        nameChargingStation:
          type: "string"
        street:
          type: "string"
        city:
          type: "string"
        locationType:
          type: "string"
        accessType:
          type: "string"
        restritions:
          type: "string"
        aditionalInfo:
          type: "string"

    Vehicle:
      type: "object"
      properties:
        registrationNumber:
          type: "string"
        typeCode:
          type: "string"
        name:
          type: "string"
        lastConsumptionReport:
          type: "number"
          format: "double"
        username:
          type: "string"
          
    VehicleModels:
      type: "object"
      properties:
        typeCode:
          type: "string"
        name:
          type: "string"
        levelTwoCharges:
          type: "string"
        fastCharges:
          type: "string"
     
    Trip:
      type: "object"
      properties:
        tripId:
          type: "integer"
          format: "int32"
        tripName:
          type: "string"
        vehicleRegistrationNumber: 
          type: "string"
        origin:
          $ref: '#/components/schemas/Position'
        destination:
          $ref: '#/components/schemas/Position'  
        duration:
          type: "string"
          format: "time"
        cost:
          type: "number"
          format: "double"
        date:
          type: "string"
          format: "date-time"
        usedChargingStations:
          type: array
          description: "Array that contains all of the charging stations id's used during the trip"
          items:
            type: "string"
            
      
    LoginInfo:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
          
          
    ChangePassword:
      type: "object"
      properties:
        currentPassword:
          type: "string"
        newPassword:
          type: "string"
          
          
    FavoriteStations:
      type: "object"
      properties:
        chargingStationId:  
          type: "string"
          
    
    TripInfo:
      type: "object"
      properties:
        username:
          description: "Username of the user that make the trip."
          type: "string"
        trip:
          $ref: "#/components/schemas/Trip"
          
    VehicleInfo:
      type: "object"
      properties:
        username:
          description: "Username of owner of the vehicle."
          type: "string"
        vehicleInfo:
          $ref: "#/components/schemas/Vehicle"
          
    UpdateConsumption:
      type: "object"
      properties:
        consumption:
          description: "consumption to be update."
          type: "string"

################################################################
#                 END OF DEFINITIONS SECTION                   #
################################################################           
          
          
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
  
  
# 2) Apply the security globally to all operations
security:
  - bearerAuth: []         # use the same name as above